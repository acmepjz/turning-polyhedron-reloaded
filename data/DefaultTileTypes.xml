<?xml version="1.0" encoding="utf-8" ?>
<!-- TEST ONLY -->
<tileTypes>
  <tileType id="ground" index="1">
    <name>Ground</name>
    <description>Normal ground.</description>
    <appearance templateName="a_ground"/>
  </tileType>
  <tileType id="block-ground">
    <appearance>
      <shader templateName="shader_ground">
        <mesh templateName="mesh_block_ground"/>
      </shader>
    </appearance>
  </tileType>
  <tileType id="soft-button" index="2">
    <name>Soft button</name>
    <description>Soft button. Activated when any part of the block presses it.</description>
    <appearance>
      <appearance templateName="a_ground"/>
      <shader templateName="shader_ground_light">
		<mesh type="prism" s="-1,-0.05,0.05">
		  <mesh type="ellipse" p="0.5,0.5" s="0.75,0.75" c="0.5,0.5" segments="16"/>
		</mesh>
      </shader>
    </appearance>
    <onEnter>
		<raiseEvent type="pressed" target="this"/>
	</onEnter>
  </tileType>
  <tileType id="hard-button" index="3">
    <name>Hard button</name>
    <description>Hard button. Activated only when the block standing on it.</description>
    <appearance>
      <appearance templateName="a_ground"/>
      <shader templateName="shader_ground_light">
		<mesh type="prism" s="-1,-0.05,0.05">
		  <mesh type="polygon" p="0.5,0.5" s="0.375,0.375">
		    <vertices>
			0.5,0,0,
			1,0.5,0,
			0.5,1,0,
			0,0.5,0,
			-0.5,1,0,
			-1,0.5,0,
			-0.5,0,0,
			-1,-0.5,0,
			-0.5,-1,0,
			0,-0.5,0,
			0.5,-1,0,
			1,-0.5,0
			</vertices>
			<triangulation type="quads">
			0,1,2,3,3,4,5,6,6,7,8,9,9,10,11,0,0,3,6,9
			</triangulation>
		  </mesh>
		</mesh>
      </shader>
    </appearance>
    <onEnter pressure="2~">
		<raiseEvent type="pressed" target="this"/>
	</onEnter>
  </tileType>
  <tileType id="teleporter" index="4">
    <name>Teleporter</name>
    <description>Teleporter will teleports your block to different locations, optionally splitting it into two smaller blocks at the same time.</description>
    <appearance>
      <appearance templateName="a_ground"/>
      <shader templateName="shader_ground_light">
		<mesh type="prism" s="-1,-0.05,0.05">
		  <mesh type="pie" p="0.5,0.5" s="0.75,0.75" s2="0.5,0.5" c="0.5,0.5" a="-0.7854,0.7854" segments="8"/>
		  <mesh type="pie" p="0.5,0.5" s="0.75,0.75" s2="0.5,0.5" c="0.5,0.5" a="2.3562,3.9270" segments="8"/>
		</mesh>
      </shader>
    </appearance>
    <onMoveEnter onGroundCount="1" main="true">
		<raiseEvent type="pressed" target="this"/><!-- ??? -->
	</onMoveEnter>
  </tileType>
  <tileType id="thin-ground" index="5">
    <name>Thin ground</name>
    <description>Thin ground are more fragile than the rest of the land. If your block stands up vertically on it, the tile will give way and your block will fall.</description>
    <appearance>
      <shader templateName="shader_thin_ground">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
    <onEnter pressure="2~">
		<remove type="breakdown" target="this"/>
	</onEnter>
  </tileType>
  <tileType id="bridge-off" index="6" invisibleAtRuntime="true" supporter="false" tilt-supporter="false" non-block="true">
    <name>Bridge (off)</name>
    <description>The bridge which is off.</description>
    <appearance templateName="a_bridge"/>
    <onEvent type="toggle|on">
		<convertTo value="7" target="this"/>
	</onEvent>
  </tileType>
  <tileType id="bridge-on" index="7">
    <name>Bridge</name>
    <description>The bridge is just the same as normal ground when it is activated.</description>
    <appearance templateName="a_bridge"/>
    <onEvent type="toggle|off">
		<convertTo value="6" target="this"/>
	</onEvent>
  </tileType>
  <tileType id="goal" index="8" exitBlock="true">
    <name>Goal</name>
    <description>You'll win the game if you get your block to fall into this square hole after visiting all checkpoints.</description>
    <appearance>
      <appearance templateName="a_ground"/>
      <appearance templateName="a_goal"/>
    </appearance>
    <onEnter onGroundCount="1" main="true" checkpointEnough="true">
		<remove type="gameFinished" target="polyhedron"/>
	</onEnter>
  </tileType>
  <tileType id="floating-goal" supporter="false" tilt-supporter="false" non-block="true" exitBlock="true">
    <appearance templateName="a_goal"/>
    <onEnter onGroundCount="1" main="true" checkpointEnough="true">
		<remove type="gameFinished" target="polyhedron"/>
	</onEnter>
  </tileType>
  <tileType id="checkpoint" checkpoint="true">
    <name>Checkpoint</name>
    <appearance>
      <appearance templateName="a_ground"/>
	  <appearance templateName="a_checkpoint"/>
    </appearance>
    <onEnter>
		<checkpoint/>
		<convertTo value="1" target="this"/>
	</onEnter>
  </tileType>
  <tileType id="floating-checkpoint" checkpoint="true" supporter="false" tilt-supporter="false" non-block="true">
    <appearance>
      <appearance templateName="a_checkpoint"/>
    </appearance>
    <onHitTest>
		<checkpoint/>
		<convertTo value="0" target="this"/>
	</onHitTest>
  </tileType>
  <tileType id="ice" index="9" type="ice">
    <name>Ice</name>
    <description>Ice are slippery. If the block is not rough enough and is completely on the ice, it will slip until get off the ice or hit the wall.</description>
    <appearance>
      <shader templateName="shader_ice" ambient="0.1,0.3,0.4" diffuse="0.2,0.4,0.4" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
  </tileType>
  <tileType id="pyramid" index="10">
    <name>Pyramid</name>
    <description>Your block is unstable when standing on the pyramid, so it will lie down immediately unless there is a wall next to your block.</description>
    <appearance>
      <!-- TODO: -->
      <shader
      	normalMap="textureFile:gfx/pyramid_normal.png"
      	ambient="0.3,0.3,0.3" diffuse="0.3,0.3,0.3" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh type="cube" s="1,1,0.25" c="0,0,1" bevel="0.05" bevelNormalSmoothness="1"
        	texcoord0="rect_unwrap"/>
      </shader>
    </appearance>
    <onMoveEnter onGroundCount="1" pressure="2~">
		<move direction="straight"/>
	</onMoveEnter>
  </tileType>
  <tileType id="wall" index="11" blocked="true" block-height="1">
    <name>Wall</name>
    <description>As an obstacle, your block can't pass through the wall, but it can recline on the wall and move around.</description>
    <appearance>
      <shader templateName="shader_ground">
        <mesh templateName="mesh_ground"/>
        <mesh templateName="mesh_wall"/>
      </shader>
    </appearance>
  </tileType>
  <!-- test new floor type -->
  <tileType id="one-time">
    <name>Very thin ground</name>
    <description>This ground is so thin that it will break down immediately after you move on it.</description>
    <appearance>
      <!-- TODO: -->
      <shader templateName="shader_one_time">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
    <onLeave>
		<remove type="breakdown" target="this"/>
	</onLeave>
  </tileType>
  <tileType id="tricky">
    <name>Tricky ground</name>
    <description>After you stand on a tricky ground, it will turn to thin ground.</description>
    <appearance>
      <!-- TODO: -->
      <shader ambient="0.4,0.2,0" diffuse="0.4,0.2,0" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh type="cube" s="1,1,0.3" p="0,0,-0.25" bevel="0.05" bevelNormalSmoothness="1"/>
      </shader>
    </appearance>
    <onLeave pressure="2~">
		<convertTo value="thin-ground" target="this"/>
	</onLeave>
  </tileType>
  <tileType id="strange">
    <name>Strange ground</name>
    <description>The block can move onto a strange ground, but only if it stands upright on it.</description>
    <appearance>
      <!-- TODO: -->
      <shader ambient="0.3,0.3,0.3" diffuse="0.3,0.3,0.3" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
    <onEnter onGroundCount="2~">
		<remove target="polyhedron"/>
	</onEnter>
  </tileType>
  <tileType id="black">
    <name>Black ground</name>
    <description>Only black block can pass through black ground.</description>
    <appearance>
      <!-- TODO: -->
      <shader ambient="0.1,0.1,0.1" diffuse="0.1,0.1,0.1" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
    <onEnter objectType="!black">
		<remove target="polyhedron"/>
	</onEnter>
  </tileType>
  <tileType id="white">
    <name>White ground</name>
    <description>Only white block can pass through white ground.</description>
    <appearance>
      <!-- TODO: -->
      <shader ambient="0.7,0.7,0.7" diffuse="0.1,0.1,0.1" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
    <onEnter objectType="!white">
		<remove target="polyhedron"/>
	</onEnter>
  </tileType>
  <tileType id="color-undefined">
    <name>Color-undefined ground</name>
    <description>Same as normal ground, but it will change to the block's color if a black or white block is leave it.</description>
    <appearance>
      <!-- TODO: -->
      <shader ambient="0.3,0.3,0.3" diffuse="0.3,0.3,0.3" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
    <onLeave objectType="black">
		<convertTo value="black" target="this"/>
	</onLeave>
    <onLeave objectType="white">
		<convertTo value="white" target="this"/>
	</onLeave>
  </tileType>
  <tileType id="color-inverse">
    <name>Color-inverse ground</name>
    <description>Same as normal ground, but it will change to the color opposite to the block's color if a black or white block is leave it.</description>
    <appearance>
      <!-- TODO: -->
      <shader ambient="0.3,0.3,0.3" diffuse="0.3,0.3,0.3" specular="0.4,0.4,0.3" specularHardness="50">
        <mesh templateName="mesh_ground"/>
      </shader>
    </appearance>
    <onLeave objectType="black">
		<convertTo value="white" target="this"/>
	</onLeave>
    <onLeave objectType="white">
		<convertTo value="black" target="this"/>
	</onLeave>
  </tileType>
</tileTypes>